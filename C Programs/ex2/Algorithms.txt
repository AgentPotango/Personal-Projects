Algorithms and Imperative Programming

A)     Find the “fixed point” of an array

Input: an array A of *distinct* integers in ascending order. (Remember that integers can be negative!) The number of integers in A is n.

Output: one position i in the list, such that A[i]=i, if any exists. Otherwise: "No".

Algorithm 1:

Find_Fixed_Point(List)

For i=0 to end of list

              If integer at list[i] == i

                             Return value of i

             

Return -1             #negative values can never be an index number

If Find_Fixed_Point(List) value == -1

              Print No

Else

              Print Find_Fixed_Point(List) value

Correctness:

              To find a fixed point, you must check the integers from the list until you find a fixed point (lines 1-2). If an integer is found that has the same number as the list index (line 2) then you must store it and end the function as a fixed point has been found (line 3). If at the end of the loop, no fixed point has been found then you must return a -1 (as -1 can never been an index number) to state that no fixed point has been found (line 4).

If the function holds a value which is -1, it prints out that no fixed points have been found (Line 5). Otherwise it prints out the value which has been found (Line 6).

Number of Operations:

              The most dominant operation is the amount of comparisons needed.

Worst Case: n

              The worst case scenario involves the algorithm searching through all n items (making n comparisons) and not finding a single fixed point. This means that the algorithm has traversed the list of length n and has found no fixed point.

Algorithm 2:

Binary_Search_Fixed_Point(List, low, mid, high)

Low = 0                #first index

High = list size -1               #last index

Mid                       #middle index

If low is less than or equal to high

              Mid = (low + high)/2

              If middle index number == mid value

                             Return   mid

              if middle index number < mid value

                             recursive binary search with same list and set high = mid - 1

              else

                             recursive binary search with same list and set low = mid + 1

end if

return -1              #Only gets run if no fixed point has been found

If Binary_Search_Fixed_Point (List) value == -1

              Print No

Else

              Print Binary_Search_Fixed_Point (List) value

                            

Correctness:

              Again, to find a fixed point, you must check the integers from the list until you find a fixed point (lines 1-3).  The binary search first checks the middle value and checks if it is a fixed point, and if it is, it is stored (line 3-4). If the middle value & index combination is not a fixed point then, if the index is less than the value, then the fixed point must be on the left hand side (lower) of the list as the list is already in ascending order (line 5-6). Similarly, if the middle index is greater than the value at that index, the fixed point must be on the right-hand side (higher) of the list (lines 7-8). This is done recursively.

If the function ends with no fixed point being found at the end of the recursive algorithm, then -1 is returned as a value (line 9-10).

If the function holds a value which is -1, it prints out that no fixed points have been found (Line 11-12). Otherwise it prints out the value which has been found (Line 13-14).

Number of Operations:

              The most dominant operation is the amount of comparisons needed.

Worst Case: O(log(n))

              The worst case scenario involves the algorithm searching through the maximum amount of mid points it can find until it is left with one integer. For a binary search, the time complexity is O(log(n)) because the time it takes to check values in comparison to the input size is similar to the form of a logarithmic function.

