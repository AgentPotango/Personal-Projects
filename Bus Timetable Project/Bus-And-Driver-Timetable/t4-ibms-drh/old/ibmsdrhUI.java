/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.ibmsdrh;

import java.awt.*;
import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author mbax2mh2
 */
public class ibmsdrhUI extends javax.swing.JFrame {
    
    /**
     * Add state members
     */
    private Date startHoliday = null;
    private Date endHoliday = null;
    private int driverID;
    private Object[][] RosterData = null;
    private Date restDayOne = null;
    private Date restDayTwo = null;
    
    //Used to set certain functions off or on depending on the cardLayout Number
    private int cardNo = 0;

    /**
     * Creates new form ibmsdrhUI
     */
    public ibmsdrhUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MessageOptionPane = new javax.swing.JOptionPane();
        RosterTableModel = new my.ibmsdrh.RosterTableModel();
        MenuPanel = new javax.swing.JPanel();
        OptionsPanel = new javax.swing.JPanel();
        ProduceRosterButton = new javax.swing.JButton();
        RequestHolidayButton = new javax.swing.JButton();
        SetRestDaysButton = new javax.swing.JButton();
        ViewRosterButton = new javax.swing.JButton();
        LoginPanel = new javax.swing.JPanel();
        LoginLabel = new javax.swing.JLabel();
        LoginField = new javax.swing.JTextField();
        LoginButtonsPanel = new javax.swing.JPanel();
        LoginSubmit = new javax.swing.JButton();
        LoginCancel = new javax.swing.JButton();
        DatesPanel = new javax.swing.JPanel();
        StartDateLabel = new javax.swing.JLabel();
        StartDatePicker = new org.jdesktop.swingx.JXDatePicker();
        EndDateLabel = new javax.swing.JLabel();
        EndDatePicker = new org.jdesktop.swingx.JXDatePicker();
        SubmitRequestButton = new javax.swing.JButton();
        CancelRequestButton = new javax.swing.JButton();
        ResponsePanel = new javax.swing.JPanel();
        ResponseScrollPane = new javax.swing.JScrollPane();
        ResponseTextArea = new javax.swing.JTextArea();
        ResponseButtonsPanel = new javax.swing.JPanel();
        ResponseAcceptButton = new javax.swing.JButton();
        ResponseDeclineButton = new javax.swing.JButton();
        RosterPanel = new javax.swing.JPanel();
        RosterScrollPane = new javax.swing.JScrollPane();
        RosterTable = new javax.swing.JTable();
        RestDaysPanel = new javax.swing.JPanel();
        RestDayOneDateLabel = new javax.swing.JLabel();
        RestDayOneDatePicker = new org.jdesktop.swingx.JXDatePicker();
        RestDayTwoDateLabel = new javax.swing.JLabel();
        RestDayTwoDatePicker = new org.jdesktop.swingx.JXDatePicker();
        SubmitRestDaysButton = new javax.swing.JButton();
        CancelRestDaysButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridLayout(0, 1));

        MenuPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("What would you like to do?"));
        MenuPanel.setMaximumSize(new java.awt.Dimension(300, 100));
        MenuPanel.setMinimumSize(new java.awt.Dimension(300, 100));
        MenuPanel.setLayout(new java.awt.CardLayout(10, 10));

        OptionsPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 20));

        ProduceRosterButton.setText("Produce Roster");
        OptionsPanel.add(ProduceRosterButton);

        RequestHolidayButton.setText("Request Holiday");
        RequestHolidayButton.setMaximumSize(new java.awt.Dimension(300, 27));
        RequestHolidayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestHolidayButtonActionPerformed(evt);
            }
        });
        OptionsPanel.add(RequestHolidayButton);

        SetRestDaysButton.setText("Set Rest Days");
        SetRestDaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetRestDaysButtonActionPerformed(evt);
            }
        });
        OptionsPanel.add(SetRestDaysButton);

        ViewRosterButton.setText("View Roster");
        ViewRosterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewRosterButtonActionPerformed(evt);
            }
        });
        OptionsPanel.add(ViewRosterButton);

        MenuPanel.add(OptionsPanel, "card2");

        LoginPanel.setLayout(new java.awt.GridLayout(3, 0, 0, 100));

        LoginLabel.setText("Please enter your driver number below:");
        LoginPanel.add(LoginLabel);
        LoginPanel.add(LoginField);

        LoginButtonsPanel.setLayout(new java.awt.GridLayout(0, 2, 100, 0));

        LoginSubmit.setText("Submit");
        LoginSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginSubmitActionPerformed(evt);
            }
        });
        LoginButtonsPanel.add(LoginSubmit);

        LoginCancel.setText("Cancel");
        LoginCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginCancelActionPerformed(evt);
            }
        });
        LoginButtonsPanel.add(LoginCancel);

        LoginPanel.add(LoginButtonsPanel);

        MenuPanel.add(LoginPanel, "card5");

        DatesPanel.setLayout(new java.awt.GridLayout(0, 2, 100, 20));

        StartDateLabel.setText("Start Date");
        DatesPanel.add(StartDateLabel);

        StartDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartDatePickerActionPerformed(evt);
            }
        });
        DatesPanel.add(StartDatePicker);

        EndDateLabel.setText("End Date");
        DatesPanel.add(EndDateLabel);
        DatesPanel.add(EndDatePicker);

        SubmitRequestButton.setText("Submit");
        SubmitRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitRequestButtonActionPerformed(evt);
            }
        });
        DatesPanel.add(SubmitRequestButton);

        CancelRequestButton.setText("Cancel");
        CancelRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelRequestButtonActionPerformed(evt);
            }
        });
        DatesPanel.add(CancelRequestButton);

        MenuPanel.add(DatesPanel, "card3");

        ResponsePanel.setLayout(new java.awt.GridLayout(2, 0));

        ResponseTextArea.setEditable(false);
        ResponseTextArea.setColumns(20);
        ResponseTextArea.setRows(5);
        ResponseScrollPane.setViewportView(ResponseTextArea);

        ResponsePanel.add(ResponseScrollPane);

        ResponseButtonsPanel.setLayout(new java.awt.GridLayout(1, 0, 100, 0));

        ResponseAcceptButton.setText("Accept");
        ResponseAcceptButton.setEnabled(false);
        ResponseAcceptButton.setPreferredSize(new java.awt.Dimension(100, 50));
        ResponseAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResponseAcceptButtonActionPerformed(evt);
            }
        });
        ResponseButtonsPanel.add(ResponseAcceptButton);

        ResponseDeclineButton.setText("Decline");
        ResponseDeclineButton.setPreferredSize(new java.awt.Dimension(100, 50));
        ResponseDeclineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResponseDeclineButtonActionPerformed(evt);
            }
        });
        ResponseButtonsPanel.add(ResponseDeclineButton);

        ResponsePanel.add(ResponseButtonsPanel);

        MenuPanel.add(ResponsePanel, "card4");

        RosterTable.setRowHeight(100);
        RosterTable.setModel(RosterTableModel);
        RosterTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        RosterScrollPane.setViewportView(RosterTable);

        RosterPanel.add(RosterScrollPane);

        MenuPanel.add(RosterPanel, "card6");

        RestDaysPanel.setLayout(new java.awt.GridLayout(0, 2, 100, 20));

        RestDayOneDateLabel.setText("Rest Day One Date");
        RestDaysPanel.add(RestDayOneDateLabel);

        RestDayOneDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestDayOneDatePickerActionPerformed(evt);
            }
        });
        RestDaysPanel.add(RestDayOneDatePicker);

        RestDayTwoDateLabel.setText("Rest Day Two Date");
        RestDaysPanel.add(RestDayTwoDateLabel);
        RestDaysPanel.add(RestDayTwoDatePicker);

        SubmitRestDaysButton.setText("Submit");
        SubmitRestDaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitRestDaysButtonActionPerformed(evt);
            }
        });
        RestDaysPanel.add(SubmitRestDaysButton);

        CancelRestDaysButton.setText("Cancel");
        CancelRestDaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelRestDaysButtonActionPerformed(evt);
            }
        });
        RestDaysPanel.add(CancelRestDaysButton);

        MenuPanel.add(RestDaysPanel, "card7");

        getContentPane().add(MenuPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RequestHolidayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestHolidayButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.next(MenuPanel);
    }//GEN-LAST:event_RequestHolidayButtonActionPerformed

    private void CancelRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelRequestButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.show(MenuPanel, "card2");
    }//GEN-LAST:event_CancelRequestButtonActionPerformed

    private void SubmitRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitRequestButtonActionPerformed
        // TODO add your handling code here:
        startHoliday = StartDatePicker.getDate();
        endHoliday = EndDatePicker.getDate();
        
        Date minStart = new Date();
        minStart.setDate(minStart.getDate() + 6);
        
        String response = "";
        
        if(startHoliday == null) {
            JOptionPane.showMessageDialog(this, "Please specify a start date",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(endHoliday == null) {
            JOptionPane.showMessageDialog(this, "Please specify an end date",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(startHoliday.after(endHoliday)) {
            JOptionPane.showMessageDialog(this, "End date must be after start date",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(startHoliday.before(minStart)) {
            JOptionPane.showMessageDialog(this, "Start date must be at least 7 days from now",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(!DriverController.hasHolidaysLeft(driverID, startHoliday, endHoliday)) {
            JOptionPane.showMessageDialog(this, "You only have " + DriverController.getHolidaysLeft(driverID) +
                    " left",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ArrayList<Date> unavailableDates = DriverController.getUnavailableDates(startHoliday, endHoliday);
        
        if(unavailableDates.isEmpty()) {
            ResponseTextArea.setText("");
            ResponseTextArea.setText("safe");
            ResponseAcceptButton.setEnabled(true);
        }
        else {
            ResponseTextArea.setText("");
            response += "The following dates are unavailable: " + '\n';
            
            for(Date d : unavailableDates) {
                response += d.toString() + '\n';
            }
            
            ResponseTextArea.setText(response);
            ResponseAcceptButton.setEnabled(false);
        }
         
      
        
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.next(MenuPanel);
    }//GEN-LAST:event_SubmitRequestButtonActionPerformed

    private void StartDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartDatePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StartDatePickerActionPerformed

    private void ResponseDeclineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResponseDeclineButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.show(MenuPanel, "card2");
    }//GEN-LAST:event_ResponseDeclineButtonActionPerformed

    private void ResponseAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResponseAcceptButtonActionPerformed
        // TODO add your handling code here:
        
        if (cardNo == 7) {
            if (restDayOne != null && restDayTwo != null) {
                 DriverInfo.setAvailable(driverID, restDayOne, false);
                 DriverInfo.setAvailable(driverID, restDayTwo, false);
                 JOptionPane.showMessageDialog(this, "Rest Days Inserted",
                "Complete",
                JOptionPane.INFORMATION_MESSAGE);
            }
            else if (restDayOne != null && restDayTwo == null) {
                DriverInfo.setAvailable(driverID, restDayOne, false);
                JOptionPane.showMessageDialog(this, "Rest Days Inserted",
                "Complete",
                JOptionPane.INFORMATION_MESSAGE);
            }
           
            cardNo = 0;
            CardLayout cl = (CardLayout)(MenuPanel.getLayout());
            cl.show(MenuPanel, "card2");
            
        }
            
        
        DriverController.setOnHoliday(driverID, startHoliday, endHoliday);
        JOptionPane.showMessageDialog(this, "Dates inserted",
                "Complete",
                JOptionPane.INFORMATION_MESSAGE);
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.previous(MenuPanel);
        
    }//GEN-LAST:event_ResponseAcceptButtonActionPerformed

    private void LoginCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginCancelActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.show(MenuPanel, "card2");
    }//GEN-LAST:event_LoginCancelActionPerformed

    private void LoginSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginSubmitActionPerformed
        // TODO add your handling code here:
        String input = LoginField.getText();
        
        if(input.compareTo("") == 0) {
            JOptionPane.showMessageDialog(this, "Please enter your driver number",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
        driverID = Integer.parseInt(input);
        }
        catch (NumberFormatException exception) {
            JOptionPane.showMessageDialog(this, "Your driver number must contain only digits",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        driverID = DriverController.findDriver(input);
        if(driverID == 0){
            JOptionPane.showMessageDialog(this, "Please enter your driver number again",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
            
                
        System.out.println(driverID);
        
        if (cardNo == 7) {
            CardLayout cl = (CardLayout)(MenuPanel.getLayout());
            cl.show(MenuPanel, "card7");
        }
        else {
            CardLayout cl = (CardLayout)(MenuPanel.getLayout());
            cl.next(MenuPanel);
        
        }
            
        
    }//GEN-LAST:event_LoginSubmitActionPerformed

    private void ViewRosterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewRosterButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.show(MenuPanel, "card6");
        
    }//GEN-LAST:event_ViewRosterButtonActionPerformed

    private void SetRestDaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetRestDaysButtonActionPerformed
        // TODO add your handling code here:
        cardNo = 7;
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.show(MenuPanel, "card5");
        
    }//GEN-LAST:event_SetRestDaysButtonActionPerformed

    private void RestDayOneDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestDayOneDatePickerActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_RestDayOneDatePickerActionPerformed

    private void SubmitRestDaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitRestDaysButtonActionPerformed
        // TODO add your handling code here:
         restDayOne = RestDayOneDatePicker.getDate();
         restDayTwo = RestDayTwoDatePicker.getDate();
         boolean dateRangeValid = false;
         
              
         Date currentDate = new Date();
         currentDate.setDate(currentDate.getDate());
         
         Date nextSunday = new Date();
         nextSunday.setDate(nextSunday.getDate());
         
         Calendar current = Calendar.getInstance();
         current.setTime(currentDate);
         int currentDay = current.get(Calendar.DAY_OF_WEEK);
         
         if (currentDay >= 1) {
             nextSunday.setDate(nextSunday.getDate() + (8-currentDay));
         }
         
         Date weekAfter = new Date();
         weekAfter.setDate(nextSunday.getDate() + 6);
         
         String response = "";
        
         
          if (restDayOne != null && restDayTwo != null) {
             if(restDayTwo.before(nextSunday) || restDayOne.before(nextSunday)) {
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified before a sunday. The next time you can specify a rest day is: " + nextSunday,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else if(restDayTwo.after(weekAfter) || restDayOne.after(weekAfter)){
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified only for the upcoming week: i.e. 6 days before: " + weekAfter,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else {
                dateRangeValid = true;
            }
         }
         else if (restDayOne == null || restDayTwo == null) {
              if(restDayOne == null && restDayTwo != null) {
                 restDayOne = restDayTwo;
                 restDayTwo = null;
             }
             if(restDayOne.before(nextSunday)) {
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified before a sunday. The next time you can specify a rest day is: " + nextSunday,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else if(restDayOne.after(weekAfter)){
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified only for the upcoming week: i.e. 6 days before: " + weekAfter,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else {
                dateRangeValid = true;
            }
         }
         else {
             JOptionPane.showMessageDialog(this, "Please specify atleast one Rest Day",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
             return;
             
         }
        
          /*
    
        if(restDayOne == null && restDayTwo == null) {
            JOptionPane.showMessageDialog(this, "Please specify atleast one Rest Day",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        else if (restDayOne != null && restDayTwo == null) {
            if(restDayOne.before(nextSunday)) {
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified before a sunday. The next time you can specify a rest day is: " + nextSunday,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else if(restDayOne.after(weekAfter)){
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified only for the upcoming week: i.e. 6 days before: " + weekAfter,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else {
                dateRangeValid = true;
            }

        }
        
        else if (restDayOne == null && restDayTwo != null) {
            if(restDayTwo.before(nextSunday)) {
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified before a sunday. The next time you can specify a rest day is: " + nextSunday,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else if(restDayTwo.after(weekAfter)){
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified only for the upcoming week: i.e. 6 days before: " + weekAfter,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else {
                dateRangeValid = true;
            }
        }
        
        else if (restDayOne != null && restDayTwo != null) {
            if(restDayTwo.before(nextSunday) || restDayOne.before(nextSunday)) {
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified before a sunday. The next time you can specify a rest day is: " + nextSunday,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else if(restDayTwo.after(weekAfter) || restDayOne.after(weekAfter)){
              JOptionPane.showMessageDialog(this, "Rest Day's must be specified only for the upcoming week: i.e. 6 days before: " + weekAfter,
                "Warning",
                JOptionPane.WARNING_MESSAGE);
              return;
            }
            else {
                dateRangeValid = true;
            }
        }
        
        */
        
        if (dateRangeValid) {
            if (restDayOne != null && restDayTwo != null) {
                //System.out.println("Both dates entered");
                if(DriverInfo.isAvailable(driverID, restDayOne) && DriverInfo.isAvailable(driverID, restDayTwo)) {
                    ResponseTextArea.setText("");
                    ResponseTextArea.setText("Rest Days Are Available");
                    ResponseAcceptButton.setEnabled(true);
                }
            }
            else if (restDayOne != null && restDayTwo == null) {  
                 System.out.println("Is date available?" + (Boolean)DriverInfo.isAvailable(driverID, restDayOne));
                if(DriverInfo.isAvailable(driverID, restDayOne)) {
                        ResponseTextArea.setText("");
                        ResponseTextArea.setText("Rest Days Are Available!");
                        ResponseAcceptButton.setEnabled(true);
                }

          }
        }
        
          else { // no dates enteres 
                System.out.println("No dates entered");
               //System.out.println("I snuck into here!");
                ResponseTextArea.setText("");
                response += "The following dates are unavailable: " + '\n';
            
                if (!DriverInfo.isAvailable(driverID, restDayOne)) {
                    response += "" + restDayOne + '\n';
                }
                if (!DriverInfo.isAvailable(driverID, restDayTwo)) {
                     response += "" + restDayTwo + '\n';
                }
                
                ResponseTextArea.setText(response);
                ResponseAcceptButton.setEnabled(false);
                    
          }
            
               
        
       
        
        
          CardLayout cl = (CardLayout)(MenuPanel.getLayout());
          cl.show(MenuPanel, "card4");
             


    }//GEN-LAST:event_SubmitRestDaysButtonActionPerformed

    private void CancelRestDaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelRestDaysButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(MenuPanel.getLayout());
        cl.show(MenuPanel, "card2");
    }//GEN-LAST:event_CancelRestDaysButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ibmsdrhUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ibmsdrhUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ibmsdrhUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ibmsdrhUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        database.openBusDatabase();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ibmsdrhUI().setVisible(true);
                Roster.main(null);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelRequestButton;
    private javax.swing.JButton CancelRestDaysButton;
    private javax.swing.JPanel DatesPanel;
    private javax.swing.JLabel EndDateLabel;
    private org.jdesktop.swingx.JXDatePicker EndDatePicker;
    private javax.swing.JPanel LoginButtonsPanel;
    private javax.swing.JButton LoginCancel;
    private javax.swing.JTextField LoginField;
    private javax.swing.JLabel LoginLabel;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JButton LoginSubmit;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JOptionPane MessageOptionPane;
    private javax.swing.JPanel OptionsPanel;
    private javax.swing.JButton ProduceRosterButton;
    private javax.swing.JButton RequestHolidayButton;
    private javax.swing.JButton ResponseAcceptButton;
    private javax.swing.JPanel ResponseButtonsPanel;
    private javax.swing.JButton ResponseDeclineButton;
    private javax.swing.JPanel ResponsePanel;
    private javax.swing.JScrollPane ResponseScrollPane;
    private javax.swing.JTextArea ResponseTextArea;
    private javax.swing.JLabel RestDayOneDateLabel;
    private org.jdesktop.swingx.JXDatePicker RestDayOneDatePicker;
    private javax.swing.JLabel RestDayTwoDateLabel;
    private org.jdesktop.swingx.JXDatePicker RestDayTwoDatePicker;
    private javax.swing.JPanel RestDaysPanel;
    private javax.swing.JPanel RosterPanel;
    private javax.swing.JScrollPane RosterScrollPane;
    private javax.swing.JTable RosterTable;
    private my.ibmsdrh.RosterTableModel RosterTableModel;
    private javax.swing.JButton SetRestDaysButton;
    private javax.swing.JLabel StartDateLabel;
    private org.jdesktop.swingx.JXDatePicker StartDatePicker;
    private javax.swing.JButton SubmitRequestButton;
    private javax.swing.JButton SubmitRestDaysButton;
    private javax.swing.JButton ViewRosterButton;
    // End of variables declaration//GEN-END:variables
}
